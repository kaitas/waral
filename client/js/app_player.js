// Generated by CoffeeScript 1.6.3
var deviceMotion, motion_off, motion_on, onPlayerReady, onPlayerStateChange, onVideoEnd, onYouTubeIframeAPIReady;

(function() {
  var firstScriptTag, hash, hashes, i, tag, vars;
  vars = [];
  hash = void 0;
  hashes = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&");
  i = 0;
  while (i < hashes.length) {
    hash = hashes[i].split("=");
    vars.push(hash[0]);
    vars[hash[0]] = hash[1];
    i++;
  }
  this.url = vars;
  tag = document.createElement("script");
  tag.src = "http://www.youtube.com/iframe_api";
  firstScriptTag = document.getElementsByTagName("script")[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  this.post_data = {};
  this.socket = io.connect("http://wp.shirai.la:3001");
  this.worker = new Worker("../js/worker.js");
  return this.count_sum = 0;
})();

onYouTubeIframeAPIReady = function() {
  return this.player = new YT.Player("player", {
    width: "680",
    height: "480",
    videoId: url["video"],
    events: {
      onReady: onPlayerReady,
      onStateChange: onPlayerStateChange
    }
  });
};

onPlayerReady = function(event) {
  return console.log("ready");
};

onVideoEnd = function() {
  var form, user_data;
  console.log("End");
  socket.json.emit('video_end', {
    videoid: url["video"],
    laugh: count_sum
  });
  user_data = url["video"] + "_" + socket.socket.transport.sessid;
  form = "https://docs.google.com/a/shirai.la/forms/d/1L52Uw8lBBxR9XoawCUTbk-PwZRQ5RZ9-Rv_qCOFp23g/viewform?";
  return location.href = form + "entry_895125279=" + count_sum + "&entry_1765780202=" + user_data;
};

onPlayerStateChange = function(event) {
  switch (event.data) {
    case YT.PlayerState.ENDED:
      motion_off();
      return onVideoEnd();
    case YT.PlayerState.PLAYING:
      return motion_on();
    case YT.PlayerState.PAUSED:
      return motion_off();
    case YT.PlayerState.BUFFERING:
      return motion_off();
    case YT.PlayerState.CUED:
      return motion_off();
  }
};

socket.on("connect", function() {
  socket.json.emit('setup', {
    videoid: url["video"]
  });
  return socket.on("video_data", function(data) {
    return $("#video_data").html("再生:" + data.play + " | " + " 笑い指数: " + data.laugh);
  });
});

socket.on("disconnect_client", function(data) {
  return $("#debug_view").html("お手数ですが，Webブラウザをリロードしてください");
});

/*
センサ関係
*/


motion_on = function() {
  return window.addEventListener("devicemotion", deviceMotion);
};

motion_off = function() {
  return window.removeEventListener("devicemotion", deviceMotion);
};

deviceMotion = function(e) {
  var d, date, post_data;
  d = new Date();
  date = d.getFullYear() + "-" + d.getMonth() + 1 + "-" + d.getDate() + " " + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds() + ":" + d.getMilliseconds();
  $("#debug_view").html("orientation: " + window.orientation);
  post_data = {
    x: e.acceleration.x,
    y: e.acceleration.y,
    z: e.acceleration.z,
    time: date,
    currenttime: player.getCurrentTime()
  };
  return worker.postMessage(post_data);
};

worker.onmessage = function(event) {
  count_sum++;
  socket.json.emit("laugh", {
    videoid: url["video"],
    playtime: event.data["currenttime"],
    amag: event.data["amag"],
    date: event.data["time"]
  });
  return $("#count_view").html("笑い回数: " + count_sum);
};
