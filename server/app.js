// Generated by CoffeeScript 1.6.3
/*
Socketio_server
*/

var Client, ClientCollection, Server, gettime, server,
  __hasProp = {}.hasOwnProperty;

Client = (function() {
  function Client() {}

  Client.prototype.id = '';

  Client.prototype.server_id = '';

  Client.prototype.remote_r = '';

  Client.prototype.video = '';

  Client.prototype.date = '';

  return Client;

})();

ClientCollection = (function() {
  var count;

  function ClientCollection() {}

  ClientCollection.prototype.clients = {};

  count = 0;

  ClientCollection.prototype.add = function(client) {
    var data, datetime;
    datetime = this.time();
    this.clients[client.id] = client;
    data = this.clients[client.id];
    count++;
    data.server_id = ("" + datetime) + ("" + count);
    return data.date = "" + datetime;
  };

  ClientCollection.prototype.time = function() {
    var d, date, hour, min, month, ms, sec, time, year;
    d = new Date();
    year = d.getFullYear();
    month = d.getMonth() + 1;
    date = d.getDate();
    hour = d.getHours();
    min = d.getMinutes();
    sec = d.getSeconds();
    ms = d.getMilliseconds();
    time = "" + year + month + date + hour + min;
    return time;
  };

  ClientCollection.prototype.exists = function(id) {
    return this.clients[id] != null;
  };

  ClientCollection.prototype.remove = function(id) {
    if (this.exists(id)) {
      return delete this.clients[id];
    }
  };

  ClientCollection.prototype.get = function(id) {
    if (this.exists(id)) {
      return this.clients[id];
    } else {
      return false;
    }
  };

  ClientCollection.prototype.size = function() {
    return this.names().length;
  };

  ClientCollection.prototype.names = function() {
    var client, id, list, _ref;
    list = [];
    _ref = this.clients;
    for (id in _ref) {
      if (!__hasProp.call(_ref, id)) continue;
      client = _ref[id];
      list.push(client.name);
    }
    return list;
  };

  return ClientCollection;

})();

gettime = function() {
  var d, date, hour, min, month, ms, sec, time, year;
  d = new Date();
  year = d.getFullYear();
  month = d.getMonth() + 1;
  date = d.getDate();
  hour = d.getHours();
  min = d.getMinutes();
  sec = d.getSeconds();
  ms = d.getMilliseconds();
  time = "" + year + "-" + month + "-" + date + " " + hour + ":" + min + ":" + sec;
  return time;
};

Server = (function() {
  var database;

  Server.prototype.io = null;

  Server.prototype.clients = null;

  Server.prototype.mysql = null;

  database = {
    host: 'yourhost',
    port: '3306',
    user: 'node',
    password: 'password',
    database: 'waral'
  };

  function Server(port) {
    this.io = require('socket.io').listen(port);
    this.clients = new ClientCollection;
    this.mysql = require('mysql');
  }

  Server.prototype.run = function() {
    var _this = this;
    return this.io.sockets.on("connection", function(socket) {
      return _this.connectionEvent(socket);
    });
  };

  Server.prototype.connectionEvent = function(socket) {
    var client, connection1, query, user_value,
      _this = this;
    console.log("connected: %s", socket.id);
    client = new Client;
    client.id = socket.id;
    this.clients.add(client);
    client.remote_r = socket.handshake.address.address;
    this.counter(socket);
    connection1 = this.mysql.createConnection(database);
    user_value = {
      NODE_ID: client.id,
      CLIENT_ID: client.server_id,
      REMOTE_ADDRES: client.remote_r,
      USER_AGENT: socket.handshake.headers['user-agent'],
      LOGIN: gettime()
    };
    connection1.connect();
    query = connection1.query('INSERT INTO USER_DATA SET ?', user_value, function(err, result) {
      console.log(query.sql);
      if (err) {
        return console.log(err);
      }
    });
    connection1.end();
    console.log('クライアントの状態', this.clients.clients);
    /*
    		各イベントの指定
    		・・ここで各イベントの処理を指定する
    */

    socket.on('disconnect', function() {
      return _this.disconnectEvent(socket);
    });
    socket.on('allive', function() {
      return _this.dummy(socket);
    });
    socket.on('video_end', function(data) {
      return _this.EndEvent(socket, data);
    });
    socket.on('setup', function(data) {
      return _this.initEvent(socket, data);
    });
    return socket.on('laugh', function(data) {
      return _this.laughEvent(socket, data);
    });
  };

  Server.prototype.disconnectEvent = function(socket) {
    var client;
    client = this.clients.get(socket.id);
    console.log("disconnected", client);
    this.clients.remove(socket.id);
    return this.counter(socket);
  };

  Server.prototype.dummy = function(socket) {
    return console.log("free");
  };

  Server.prototype.EndEvent = function(socket, data) {
    var connection2, query2, sql2, value1, value2;
    console.log("videoid:", data.videoid);
    console.log("laugh:", data.laugh);
    connection2 = this.mysql.createConnection(database);
    value1 = connection2.escape(data.laugh);
    value2 = connection2.escape(data.videoid);
    sql2 = "UPDATE VIDEO_DATA SET LAUGH_SUM=LAUGH_SUM + " + value1 + " WHERE VIDEOID =" + value2;
    connection2.connect();
    query2 = connection2.query(sql2, function(err, result) {
      if (err) {
        console.log(err);
      }
      return console.log(query2.sql);
    });
    return connection2.end();
  };

  Server.prototype.initEvent = function(socket, data) {
    var client, connection3, connection4, query3, sql3, sql4, videoid_sql;
    client = this.clients.get(socket.id);
    connection3 = this.mysql.createConnection(database);
    connection4 = this.mysql.createConnection(database);
    client.video = data.videoid;
    videoid_sql = connection3.escape(data.videoid);
    sql3 = "SELECT * FROM VIDEO_DATA WHERE VIDEOID = " + videoid_sql;
    sql4 = "UPDATE VIDEO_DATA SET PLAY = PLAY + 1, DATE =" + this.mysql.escape(gettime()) + " WHERE VIDEOID =" + videoid_sql;
    connection3.connect();
    query3 = connection3.query(sql3, function(err, result1) {
      var insert_value, query4;
      if (err) {
        console.log(err);
      }
      console.log(query3.sql);
      console.log("insert_result: ", result1);
      console.log("length: ", Object.keys(result1).length);
      if (Object.keys(result1).length === 0) {
        console.log("result is null");
        socket.json.emit('video_data', {
          play: "0",
          laugh: "0"
        });
        insert_value = {
          VIDEOID: client.video,
          PLAY: 1,
          LAUGH_SUM: 0,
          DATE: gettime()
        };
        connection4.connect();
        query4 = connection4.query('INSERT INTO VIDEO_DATA SET ?', insert_value, function(err, result2) {
          console.log(query4.sql);
          if (err) {
            return console.log(err);
          }
        });
        return connection4.end();
      } else {
        console.log("result is set");
        console.log("result1_ID: ", result1[0].ID);
        console.log("result1_PLAY: ", result1[0].PLAY);
        console.log("result1_PLAY: ", result1[0].LAUGH_SUM);
        socket.json.emit('video_data', {
          play: result1[0].PLAY,
          laugh: result1[0].LAUGH_SUM
        });
        connection4.connect();
        query4 = connection4.query(sql4, function(err, result) {
          console.log(query4.sql);
          if (err) {
            return console.log(err);
          }
        });
        return connection4.end();
      }
    });
    return connection3.end();
  };

  Server.prototype.laughEvent = function(socket, data) {
    var connection5, laugh_value, query5;
    connection5 = this.mysql.createConnection(database);
    laugh_value = {
      NODE_ID: socket.id,
      VIDEOID: data.videoid,
      PLAYTIME: data.playtime,
      AMAG: data.amag,
      DATE: data.date
    };
    connection5.connect();
    query5 = connection5.query('INSERT INTO LAUGH_DATA SET ?', laugh_value, function(err, result) {
      console.log(query5.sql);
      if (err) {
        return console.log(err);
      }
    });
    return connection5.end();
  };

  Server.prototype.counter = function(socket) {
    var names;
    names = this.clients.size();
    return console.log("クライアント数：", names);
  };

  return Server;

})();

/*
サーバーの作成と起動
*/


server = new Server(3001);

server.run();
